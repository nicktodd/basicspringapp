{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "AWS CloudFormation Template. This template installs a highly-available,  scalable Sample Application deployment ONLY THE EU-WEST-1 AMI ID IS CORRECT!!",

  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "Default": "ConygreAWSKey"
    },

    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.nano",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "WebServerCapacity": {
      "Default": "1",
      "Description": "The initial number of WebServer instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "5",
      "ConstraintDescription": "must be between 1 and 5 EC2 instances."
    },

    "SSHLocation": {
      "Description": " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings": {
    "AWSInstanceType2Arch": {
      "t2.micro": { "Arch": "64" },
      "t2.nano": { "Arch": "64" },
      "t2.medium": { "Arch": "64" },
      "t2.large": { "Arch": "64" },
      "m4.large": { "Arch": "64" },
      "m4.xlarge": { "Arch": "64" },
      "m4.2xlarge": { "Arch": "64" },
      "m4.4xlarge": { "Arch": "64" }
    },

    "AWSRegionArch2AMI": {
      "us-east-1": {
        "32": "ami-31814f58",
        "64": "ami-1b814f72",
        "64HVM": "ami-0da96764"
      },
      "us-west-2": {
        "32": "ami-38fe7308",
        "64": "ami-30fe7300",
        "64HVM": "NOT_YET_SUPPORTED"
      },
      "us-west-1": {
        "32": "ami-11d68a54",
        "64": "ami-1bd68a5e",
        "64HVM": "NOT_YET_SUPPORTED"
      },
      "eu-west-1": {
        "32": "ami-973b06e3",
        "64": "ami-acd005d5",
        "64HVM": "NOT_YET_SUPPORTED"
      },
      "eu-west-2": {
        "32": "ami-dff017b8",
        "64": "ami-dff017b8",
        "64HVM": "ami-dff017b8"
      },
      "ap-southeast-1": {
        "32": "ami-b4b0cae6",
        "64": "ami-beb0caec",
        "64HVM": "NOT_YET_SUPPORTED"
      },
      "ap-southeast-2": {
        "32": "ami-b3990e89",
        "64": "ami-bd990e87",
        "64HVM": "NOT_YET_SUPPORTED"
      },
      "ap-northeast-1": {
        "32": "ami-0644f007",
        "64": "ami-0a44f00b",
        "64HVM": "NOT_YET_SUPPORTED"
      },
      "sa-east-1": {
        "32": "ami-3e3be423",
        "64": "ami-3c3be421",
        "64HVM": "NOT_YET_SUPPORTED"
      }
    }
  },

  "Resources": {
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": ["Ec2ToS3Role"]
      }
    },

    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Metadata": {
        "Comment1": "Configure the Load Balancer with a simple health check and cookie-based stickiness",
        "Comment2": "Use install path for healthcheck to avoid redirects - ELB healthcheck does not handle 302 return codes"
      },
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "8080",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:8080/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "10",
          "Timeout": "5"
        }
      }
    },

    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "LaunchConfig" },
        "MinSize": "1",
        "MaxSize": "5",
        "DesiredCapacity": { "Ref": "WebServerCapacity" },
        "LoadBalancerNames": [{ "Ref": "ElasticLoadBalancer" }]
      }
    },

    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            { "Ref": "AWS::Region" },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                { "Ref": "InstanceType" },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": { "Ref": "InstanceType" },
        "SecurityGroups": [{ "Ref": "WebServerSecurityGroup" }],
        "KeyName": { "Ref": "KeyName" },
        "IamInstanceProfile": { "Ref": "InstanceProfile" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "yum update -y\n",
                "yum -y install java-1.8.0\n",
                "yum -y remove java-1.7.0-openjdk\n",
                "cd /home/ec2-user\n",
                "aws s3 cp s3://training.conygre.com/builds/sampleapp.jar /home/ec2-user/sampleapp.jar\n",
                "nohup java -jar sampleapp.jar > ec2dep.log\n"
              ]
            ]
          }
        }
      }
    },

    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access via port 8080 locked down to the load balancer + SSH access",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "8080",
            "SourceSecurityGroupOwnerId": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.OwnerAlias"
              ]
            },
            "SourceSecurityGroupName": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.GroupName"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "SSHLocation" }
          }
        ]
      }
    }
  },

  "Outputs": {
    "WebsiteURL": {
      "Value": {
        "Fn::Join": [
          "",
          ["http://", { "Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"] }]
        ]
      },
      "Description": "TestMaker"
    }
  }
}
